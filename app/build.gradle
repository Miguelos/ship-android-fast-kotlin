buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
  }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.androidMinSdkVersion
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    applicationId rootProject.ext.androidApplicationId
    versionCode rootProject.ext.androidVersionCode
    versionName rootProject.ext.androidVersionName
    testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    testApplicationId rootProject.ext.testApplicationId
  }

  aaptOptions {
    additionalParameters "--no-version-vectors"
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }

  signingConfigs {
    release {
      def props = new Properties()
      props.load(new FileInputStream(rootProject.file("config/buildsystem/release.properties")))

      storeFile file(props.keyStore)
      storePassword props.keyStorePassword
      keyAlias props.keyAlias
      keyPassword props.keyAliasPassword
    }
  }

  buildTypes {
    debug {

      def type = rootProject.ext.debug
      applicationIdSuffix '.debug'
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled false
      debuggable true
    }

    stage {

      def type = rootProject.ext.stage
      applicationIdSuffix '.stage'
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled true
      debuggable true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro',
          'proguard-rules-stage.pro'
      signingConfig signingConfigs.debug
    }

    release {

      def type = rootProject.ext.prod
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

/*
  TODO: if we want to minimize the size of the apk with different releases for fresco libs
 splits {
    abi {
      enable true
      reset()
      include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a', 'armeabi'
      universalApk false
    }
  }*/
}

dependencies {
  def appDependencies = rootProject.ext.appDependencies
  def appTestDependencies = rootProject.ext.appTestDependencies

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  kapt appDependencies.daggerCompiler
  compile appDependencies.dagger

  compile appDependencies.supportRecyclerView
  compile appDependencies.supportCardView
  compile appDependencies.supportDesign
  compile appDependencies.supportAppCompat
  compile appDependencies.support

  compile appDependencies.fresco
  compile appDependencies.frescoOkhttp

  compile appDependencies.timber

  compile appDependencies.rxJava
  compile appDependencies.rxAndroid
  compile appDependencies.rxKotlin

  compile appDependencies.ankoCommon

  debugCompile appDependencies.leakcanaryDebug
  stageCompile appDependencies.leakcanaryRelease
  releaseCompile appDependencies.leakcanaryRelease

  provided appDependencies.javaxAnnotation

  compile appDependencies.retrofit2
  compile appDependencies.retrofit2MoshiConverter
  compile appDependencies.retrofit2RxAdapter
  compile appDependencies.supportAnnotations
  compile appDependencies.okHttpLoggingInterceptor
  compile appDependencies.moshi

  androidTestCompile appTestDependencies.mockito
  androidTestCompile appTestDependencies.dexmaker
  androidTestCompile appTestDependencies.dexmakerMockito
  androidTestCompile appTestDependencies.espresso
  androidTestCompile appTestDependencies.espressoIntents
  androidTestCompile appTestDependencies.testingRunner
  androidTestCompile appTestDependencies.testingRules
  androidTestCompile appTestDependencies.supportAnnotations
}

kapt {
  generateStubs = true
}
