buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
  }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.androidMinSdkVersion
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    applicationId rootProject.ext.androidApplicationId
    versionCode rootProject.ext.androidVersionCode
    versionName rootProject.ext.androidVersionName
    testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    testApplicationId rootProject.ext.testApplicationId

    generatedDensities = []
  }

  aaptOptions {
    additionalParameters "--no-version-vectors"
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }

  signingConfigs {
    release {
      def props = new Properties()
      props.load(new FileInputStream(rootProject.file("config/buildsystem/release.properties")))

      storeFile file(props.keyStore)
      storePassword props.keyStorePassword
      keyAlias props.keyAlias
      keyPassword props.keyAliasPassword
    }
  }

  buildTypes {
    debug {

      def type = rootProject.ext.debug
      applicationIdSuffix '.debug'
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled false
      debuggable true
    }

    stage {

      def type = rootProject.ext.stage
      applicationIdSuffix '.stage'
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled true
      debuggable true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro',
          'proguard-rules-stage.pro'
      signingConfig signingConfigs.debug
    }

    release {

      def type = rootProject.ext.prod
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def newApkName
      //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
      if (output.zipAlign) {
        newApkName = appName + "-${variant.versionName}.apk"
      } else {
        newApkName = appName + "-${variant.versionName}-unaligned.apk"
      }
      output.outputFile = new File(output.outputFile.parent, newApkName)
    }
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }
}

dependencies {
  def presentationDependencies = rootProject.ext.presentationDependencies
  def presentationTestDependencies = rootProject.ext.presentationTestDependencies
  def dataDependencies = rootProject.ext.dataDependencies

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  kapt presentationDependencies.daggerCompiler
  compile presentationDependencies.dagger
  compile presentationDependencies.supportRecyclerView
  compile presentationDependencies.supportCardView
  compile presentationDependencies.supportDesign
  compile presentationDependencies.supportAppCompat
  compile presentationDependencies.support
  compile presentationDependencies.rxJava
  compile presentationDependencies.rxAndroid
  compile presentationDependencies.glide
  compile presentationDependencies.rxKotlin

  compile presentationDependencies.ankoSdk
  compile presentationDependencies.ankoSupport
  compile presentationDependencies.ankoAppcompat
  compile presentationDependencies.ankoDesign
  compile presentationDependencies.ankoRecyclerview
  compile presentationDependencies.ankoCards

  debugCompile presentationDependencies.leakcanaryDebug
  stageCompile presentationDependencies.leakcanaryRelease
  releaseCompile presentationDependencies.leakcanaryRelease

  provided presentationDependencies.javaxAnnotation

  compile dataDependencies.retrofit2
  compile dataDependencies.retrofit2MoshiConverter
  compile dataDependencies.retrofit2RxAdapter
  compile dataDependencies.supportAnnotations
  compile dataDependencies.okHttpLoggingInterceptor
  compile dataDependencies.moshi

  androidTestCompile presentationTestDependencies.mockito
  androidTestCompile presentationTestDependencies.dexmaker
  androidTestCompile presentationTestDependencies.dexmakerMockito
  androidTestCompile presentationTestDependencies.espresso
  androidTestCompile presentationTestDependencies.espressoIntents
  androidTestCompile presentationTestDependencies.testingRunner
  androidTestCompile presentationTestDependencies.testingRules
  androidTestCompile presentationTestDependencies.supportAnnotations
}

kapt {
  generateStubs = true
}
